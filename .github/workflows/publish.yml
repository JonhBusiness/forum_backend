name: publish

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  HOST: ubuntu@ec2-18-219-234-115.us-east-2.compute.amazonaws.com

jobs:
  create-docker-image:
    runs-on: ubuntu-latest 
    steps:
    - name: Checkout the code
      uses: actions/checkout@v2 
    
    - name: Login to Github Container Registry
      uses: docker/login-action@v3 
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.TOKEN_CD }} 

    - name: Build and push image
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: ghcr.io/jonhbusiness/forum_backend:latest
        # Asegúrate de que el nombre del repositorio sea en minúsculas

  deploy:
    needs: create-docker-image
    runs-on: ubuntu-latest
    
    steps:

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
        name: id_rsa

    - name: Test Connection to Server
      env:
        HOST: ${{ env.HOST }}
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $HOST "echo Connection successful"

    - name: Deploy to server
      env:
        HOST: ${{ env.HOST }}
      run: |
        ssh -v $HOST << EOF
          echo "Setting up Docker environment on server"
          
          # Login to Docker registry
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.TOKEN_CD }}

        EOF

    - name: Run Backend Container
      run: |
        ssh -v $HOST << EOF
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.TOKEN_CD }}
          docker pull ghcr.io/jonhbusiness/forum_backend:latest
          docker stop forum_backend || true
          docker rm forum_backend || true
          docker run -d \
            --name forum_backend \
            -p 8080:8080 \
            --restart always \
            ghcr.io/jonhbusiness/forum_backend:latest
        EOF

    - name: Clean up old Docker images
      run: |
        ssh -v $HOST << EOF
          # Eliminar contenedores detenidos
          docker container prune -f

          # Eliminar imágenes sin usar
          docker image prune -a -f --filter "until=24h"

          # Eliminar volúmenes sin usar
          docker volume prune -f

          # Eliminar redes sin usar
          docker network prune -f

          # Mantener solo las últimas 3 imágenes de tu aplicación
          docker images --format '{{.ID}} {{.CreatedAt}}' ghcr.io/jonhbusiness/forum_backend | 
          sort -k2 -r | 
          tail -n +4 | 
          awk '{print $1}' | 
          xargs -r docker rmi
        EOF
